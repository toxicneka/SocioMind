from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatType
from aiogram.filters import Command
from config import questions
from utils.states import TestStates
from services.gigachat import GigaChatService
from services.google_sheets_service import GoogleSheetsService
from utils.helpers import save_user_type, get_user_type
from datetime import datetime
import asyncio

router = Router()
gigachat_service = GigaChatService()
sheets_service = GoogleSheetsService()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

# –ö–æ–º–∞–Ω–¥–∞ /test —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
@router.message(Command("test"), F.chat.type == ChatType.PRIVATE)
async def start_test(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∏–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_type = await get_user_type(message.from_user.id)
    if existing_type:
        await message.answer(
            f"üìä –£ –≤–∞—Å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: <b>{existing_type}</b>\n"
            "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç...",
            parse_mode="HTML"
        )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[message.from_user.id] = []
    
    await message.answer(
        "üìù <b>–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏!</b>\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 8 –≤–æ–ø—Ä–æ—Å–æ–≤. –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–∏ –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ.\n"
        "–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 500 —Å–∏–º–≤–æ–ª–∞–º–∏.\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel</i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await asyncio.sleep(1)
    await message.answer(f"1/8: {questions[0]}")
    await state.set_state(TestStates.waiting_for_answer_1)

@router.message(F.text == "/cancel")
async def cancel_test(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state.startswith("TestStates:"):
        if message.from_user.id in user_answers:
            del user_answers[message.from_user.id]
        await state.clear()
        await message.answer(
            "‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.message(TestStates.waiting_for_answer_1, F.text)
async def process_answer_1(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"2/8: {questions[1]}")
    await state.set_state(TestStates.waiting_for_answer_2)

@router.message(TestStates.waiting_for_answer_2, F.text)
async def process_answer_2(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"3/8: {questions[2]}")
    await state.set_state(TestStates.waiting_for_answer_3)

@router.message(TestStates.waiting_for_answer_3, F.text)
async def process_answer_3(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"4/8: {questions[3]}")
    await state.set_state(TestStates.waiting_for_answer_4)

@router.message(TestStates.waiting_for_answer_4, F.text)
async def process_answer_4(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"5/8: {questions[4]}")
    await state.set_state(TestStates.waiting_for_answer_5)

@router.message(TestStates.waiting_for_answer_5, F.text)
async def process_answer_5(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"6/8: {questions[5]}")
    await state.set_state(TestStates.waiting_for_answer_6)

@router.message(TestStates.waiting_for_answer_6, F.text)
async def process_answer_6(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"7/8: {questions[6]}")
    await state.set_state(TestStates.waiting_for_answer_7)

@router.message(TestStates.waiting_for_answer_7, F.text)
async def process_answer_7(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_answers[message.from_user.id].append(message.text)
    await message.answer(f"8/8: {questions[7]}")
    await state.set_state(TestStates.waiting_for_answer_8)

@router.message(TestStates.waiting_for_answer_8, F.text)
async def process_answer_8(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    user_answers[message.from_user.id].append(message.text)
    
    await message.answer("üîÆ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...</b>", parse_mode="HTML")

    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_type = await gigachat_service.determine_personality_type(
            user_answers[message.from_user.id]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Å–æ–¥–µ—Ä–∂–∏—Ç 4 –±—É–∫–≤—ã)
        if len(personality_type.strip()) != 4:
            personality_type = "INTJ"
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis = await gigachat_service.generate_personality_analysis(
            personality_type, 
            user_answers[message.from_user.id]
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        await save_user_type(
            message.from_user.id,
            message.from_user.username or message.from_user.first_name,
            personality_type
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
        user_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username or message.from_user.first_name,
            'personality_type': personality_type,
            'timestamp': datetime.now().isoformat()
        }
        await sheets_service.save_to_sheets(user_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"üéØ <b>–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_type}</b>\n\n"
            f"{analysis}\n\n"
            f"<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /report –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã</i>",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ–∑–∂–µ.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        print(f"Error in personality analysis: {e}")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        if message.from_user.id in user_answers:
            del user_answers[message.from_user.id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
@router.message(TestStates.waiting_for_answer_1)
@router.message(TestStates.waiting_for_answer_2)
@router.message(TestStates.waiting_for_answer_3)
@router.message(TestStates.waiting_for_answer_4)
@router.message(TestStates.waiting_for_answer_5)
@router.message(TestStates.waiting_for_answer_6)
@router.message(TestStates.waiting_for_answer_7)
@router.message(TestStates.waiting_for_answer_8)
async def process_wrong_input(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel"
    )