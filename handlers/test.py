import asyncio
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.states import TestStates
from services.gemini import determine_personality_type
from services.google_sheets import init_google_sheets, save_to_sheets
from database.models import User, UserPersonality
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

test_router = Router()

questions = [
    "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ —Ö–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π?",
    "–ö–∞–∫ –≤—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á–∞—Ö?",
    "–ö–∞–∫ –≤—ã –≤–µ–¥–µ—Ç–µ —Å–µ–±—è –≤ –Ω–æ–≤–æ–π –∏–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
    "–ß—Ç–æ –≤–∞—Å —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–±–∏–≤–∞–µ—Ç –∏–∑ –∫–æ–ª–µ–∏ –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –æ–±—â–µ–Ω–∏–∏?",
    "–ö–∞–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –ø–æ–º–æ—â—å —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –≤—ã–∑—ã–≤–∞–µ—Ç —É –≤–∞—Å —á—É–≤—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–∏—è –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏?",
    "–ù–∞ —á—Ç–æ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
    "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–æ—Å—Ç—É–ø–∞–µ—Ç, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –Ω–µ—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ?",
    "–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö?"
]

@test_router.message(Command("test"))
async def cmd_test(message: Message, state: FSMContext, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
    result = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –æ –ª–∏—á–Ω–æ—Å—Ç–∏
        result = await session.execute(
            select(UserPersonality)
            .where(UserPersonality.user_id == user.id)
            .order_by(UserPersonality.determined_at.desc())
        )
        latest_personality = result.scalar_one_or_none()
        
        if latest_personality:
            await message.answer(
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏–ø: {latest_personality.personality_type}. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç? (–î–∞/–ù–µ—Ç)"
            )
            return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
        session.add(user)
        await session.commit()
        await session.refresh(user)
    
    await message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    await state.update_data(answers=[], user_id=user.id)
    await state.set_state(TestStates.question_1)
    await message.answer(questions[0])

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def answer_handler(question_number: int):
    async def handler(message: Message, state: FSMContext, session: AsyncSession):
        data = await state.get_data()
        answers = data.get('answers', [])
        answers.append(message.text)
        await state.update_data(answers=answers)
        
        if question_number < len(questions):
            next_state = getattr(TestStates, f"question_{question_number + 1}")
            await state.set_state(next_state)
            await message.answer(questions[question_number])
        else:
            # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
            try:
                personality_type = await determine_personality_type(answers)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                personality = UserPersonality(
                    user_id=data['user_id'],
                    personality_type=personality_type,
                    test_answers=answers
                )
                session.add(personality)
                await session.commit()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
                gc = init_google_sheets()
                await asyncio.to_thread(save_to_sheets, gc, {
                    'user_id': message.from_user.id,
                    'username': message.from_user.username,
                    'personality_type': personality_type
                })
                
                await message.answer(f"üîç –í–∞—à —Ç–∏–ø: {personality_type}")
            except Exception as e:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"Error determining personality type: {e}")
            finally:
                await state.clear()
    
    return handler

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
for i in range(1, 9):
    test_router.message(getattr(TestStates, f"question_{i}"))(answer_handler(i))