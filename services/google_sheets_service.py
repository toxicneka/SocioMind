import gspread
from google.oauth2.service_account import Credentials
import logging
from config import SPREADSHEET_ID, GOOGLE_SHEETS_CREDS
import asyncio
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class GoogleSheetsService:
    def __init__(self):
        self.enabled = False
        self.client = None
        self.sheet = None
        
        logger.info("=== –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò GOOGLE SHEETS ===")
        logger.info(f"GOOGLE_SHEETS_CREDS: {GOOGLE_SHEETS_CREDS}")
        logger.info(f"SPREADSHEET_ID: {SPREADSHEET_ID}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not GOOGLE_SHEETS_CREDS:
                logger.error("‚ùå GOOGLE_SHEETS_CREDS –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
                
            if not os.path.exists(GOOGLE_SHEETS_CREDS):
                logger.error(f"‚ùå –§–∞–π–ª {GOOGLE_SHEETS_CREDS} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            else:
                logger.info(f"‚úÖ –§–∞–π–ª {GOOGLE_SHEETS_CREDS} –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SPREADSHEET_ID
            if not SPREADSHEET_ID:
                logger.error("‚ùå SPREADSHEET_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            else:
                logger.info(f"‚úÖ SPREADSHEET_ID —É–∫–∞–∑–∞–Ω: {SPREADSHEET_ID}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ scope
            # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ SCOPE –î–õ–Ø GOOGLE DRIVE API
            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            logger.info("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é service account...")
            
            creds = Credentials.from_service_account_file(GOOGLE_SHEETS_CREDS, scopes=scope)
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            logger.info("üìä –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É...")
            try:
                spreadsheet = self.client.open_by_key(SPREADSHEET_ID)
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {spreadsheet.title}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                self.sheet = spreadsheet.sheet1
                logger.info("‚úÖ –õ–∏—Å—Ç –ø–æ–ª—É—á–µ–Ω")
                
                self.enabled = True
                logger.info("üéâ GoogleSheetsService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                asyncio.create_task(self.initialize_headers())
                
            except gspread.exceptions.SpreadsheetNotFound:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SPREADSHEET_ID.")
            except gspread.exceptions.APIError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)

    async def initialize_headers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if self.enabled:
                logger.info("üìù –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...")
                existing_data = self.sheet.get_all_values()
                
                if not existing_data:
                    headers = ['User ID', 'Telegram username', '–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏', '–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è']
                    self.sheet.append_row(headers)
                    logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    async def save_to_sheets(self, user_data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        if not self.enabled:
            logger.warning(f"‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {user_data}")
            return
        
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}...")
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                existing_user = self.sheet.find(str(user_data['user_id']))
                if existing_user:
                    row = existing_user.row
                    self.sheet.update(f'A{row}:D{row}', [[
                        user_data['user_id'],
                        user_data['username'],
                        user_data['personality_type'],
                        user_data.get('timestamp', datetime.now().isoformat())
                    ]])
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    self.sheet.append_row([
                        user_data['user_id'],
                        user_data['username'],
                        user_data['personality_type'],
                        user_data.get('timestamp', datetime.now().isoformat())
                    ])
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']} –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    
            except gspread.exceptions.CellNotFound:
                self.sheet.append_row([
                    user_data['user_id'],
                    user_data['username'],
                    user_data['personality_type'],
                    user_data.get('timestamp', datetime.now().isoformat())
                ])
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']} –¥–æ–±–∞–≤–ª–µ–Ω—ã (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")

    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        if not self.enabled:
            return False
        
        try:
            self.sheet.row_values(1)
            logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets –ø—Ä–æ–π–¥–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
            return False
